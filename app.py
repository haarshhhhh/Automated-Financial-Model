# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ygi0vJDZNb-ymVfLhl6Xb2wV0mB-nZ67
"""

# app.py
import streamlit as st
import pandas as pd
import os

from processor import process_file
from geminiresponse import get_gemini_response

# ----------------- GitHub Repo Config -----------------
GITHUB_USER = "haarshhhhh"
REPO_NAME = "Automated-Financial-Model"
BRANCH = "main"
DATA_FOLDER = ""  # leave empty if files are in repo root

# Mapping between company names and Excel file names
COMPANY_FILES = {
    "Infosys": "Infosys (1).xlsx",
    "Reliance Industries": "Reliance Industr.xlsx",
    "Nestle India": "Nestle India (1).xlsx",
    "ITC": "ITC.xlsx",
    "Tata Consumer": "Tata Consumer.xlsx",
    "Tata Motors": "Tata Motors (2).xlsx",
    "Tata Power": "Tata Power Co (1).xlsx",
    "Tata Steel": "Tata Steel.xlsx",
    "Tata Power (Alt)": "TATAPOWER.xlsx",
    "Tata Steel (Alt)": "TATASTEEL.xlsx",
    "Tata Consumer (Alt)": "TATACONSUM.xlsx"
}

def load_company_excel(file_name: str) -> dict:
    """Fetch Excel from GitHub and return all sheets as DataFrames."""
    url = f"https://raw.githubusercontent.com/{GITHUB_USER}/{REPO_NAME}/{BRANCH}/{DATA_FOLDER}{file_name}"
    try:
        sheets = pd.read_excel(url, sheet_name=None)
        return sheets
    except Exception as e:
        st.error(f"❌ Could not load {file_name} from GitHub.\nError: {e}")
        return {}

# ----------------- Streamlit App -----------------

st.set_page_config(page_title="Automated Financial Model", layout="wide")
st.title("📊 Automated Financial Modeling Demo")

# Step 1: Company selection
company = st.selectbox("🏢 Select a Company", list(COMPANY_FILES.keys()))

# Step 2: Load company data
if st.button("📂 Load Company Data"):
    file_name = COMPANY_FILES[company]
    sheets = load_company_excel(file_name)

    if sheets:
        st.success(f"✅ Loaded {company} successfully! Sheets: {list(sheets.keys())}")

        # Process financials
        with st.spinner("Processing financial statements..."):
            results = process_file(sheets)

        # Sidebar for options
        option = st.sidebar.radio(
            "Choose View:",
            ("Income Statement", "Balance Sheet", "Cash Flow Statement", "Ratio Analysis")
        )

        if option == "Income Statement":
            st.subheader("📑 Income Statement")
            st.dataframe(results["styled_df"])

        elif option == "Balance Sheet":
            st.subheader("📊 Balance Sheet")
            st.dataframe(results["styled_balance_sheet"])

        elif option == "Cash Flow Statement":
            st.subheader("💵 Cash Flow Statement")
            st.dataframe(results["cf_df"])

        elif option == "Ratio Analysis":
            st.subheader("📈 Ratio Analysis")
            st.dataframe(results["styled_ratios"])

            # Visualize
            st.line_chart(results["styled_ratios"].T)

            # Gemini Interpretation
            if st.button("🔮 Get Gemini’s Interpretation"):
                with st.spinner("Asking Gemini..."):
                    response = get_gemini_response(results["styled_ratios"])
                st.success("✅ Gemini’s Response")
                st.write(response)