# -*- coding: utf-8 -*-
"""geminiresponse.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yMlNa4mdTPOH3E_KBm2l-Ho8MMrxd6iJ
"""

def create_financial_prompts(ratios_df):
    prompts = {}

    groups = {
        "Growth Ratios": ['Sales Growth', 'EBITDA Growth', 'EBIT Growth', 'Net Profit Growth', 'Dividend Growth'],
        "Profitability Margins": ['Gross Margin', 'EBITDA Margin', 'EBIT Margin (Operating Margin)', 'Net Profit Margin'],
        "Return Ratios": ['Return on Equity (ROE)', 'Return on Capital Employed (ROCE)', 'Self Sustained Growth Rate'],
        "Coverage Ratios": ['Interest Coverage Ratio'],
        "Turnover Ratios": ['Debtor Turnover Ratio', 'Creditor Turnover Ratio', 'Inventory Turnover Ratio', 'Fixed Asset Turnover Ratio'],
        "Working Capital Days & Cycle": ['Debtor Days', 'Payable Days', 'Inventory Days', 'Cash Conversion Cycle (Days)'],
    }

    templates = {
        "Growth Ratios": "Company's Growth Ratios over recent years:\n{data}\n\nPlease analyze the company's growth trends and comment on sustainability, strengths, and concerns.",
        "Profitability Margins": "Company's Profitability Margins (%):\n{data}\n\nProvide insights on the company's profit margins and operational efficiency, and highlight any notable trends.",
        "Return Ratios": "Return Ratios of the company:\n{data}\n\nExplain the returns generated for shareholders and capital providers, and assess growth sustainability.",
        "Coverage Ratios": "Interest Coverage Ratio:\n{data}\n\nAssess the company’s ability to meet its debt obligations based on this ratio.",
        "Turnover Ratios": "Turnover Ratios:\n{data}\n\nInterpret these turnover ratios with respect to the company’s operational efficiency and asset utilization.",
        "Working Capital Days & Cycle": "Working Capital Days and Cash Conversion Cycle:\n{data}\n\nAnalyze how efficiently the company manages its working capital and liquidity.",
    }

    for group_name, ratio_names in groups.items():
        filtered_df = ratios_df.loc[ratio_names]
        text_data = filtered_df.to_string()
        prompt = templates[group_name].format(data=text_data)
        prompts[group_name] = prompt

    return prompts

# Usage
all_prompts = create_financial_prompts(ratios_df)

# Now all_prompts is a dict with keys = group names and values = prompt texts
# You can call your LLM for each prompt one by one:
# response = llm.invoke(all_prompts["Growth Ratios"])

import google.generativeai as genai

# Configure with your API key
genai.configure(api_key="AIzaSyBrfKJkGO2JL4Q7AJodOmRONZaSLh221hU")

# Load the model
model = genai.GenerativeModel("gemini-1.5-flash")  # or "gemini-1.5-pro"

for group, prompt in all_prompts.items():
    response = model.generate_content(prompt)
    print(f"\n--- {group} ---")
    print(response.text)